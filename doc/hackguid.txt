Lix hacker's guide
==================

How to use and hack the Lix source.



Building Lix
------------

See this file: doc/build.txt

It has instructions on how to install a D compiler, the build system dub,
and the required libraries.



Finishing the port
------------------
Simon shall search the code for instances of DTODO, which mark things that
shall be tested/altered when most things have been ported.

Instances of DTODOLANG point to missing use of the Language class, which
has not yet been ported.



LF or CRLF terminators
----------------------
Source code should have LF terminators. Anything else is crazy.

I don't care about what's used in level or replay files. Lix can read them
with either, and tools like grep or sed will work, too. Inspecting them with
an interactive editor is a nice-to-have, but not required.

Documentation (all ./doc/* files) and translations (all ./data/transl/* files)
should have CRLF endings. They must be accessible by Windows Notepad users.

The translations (./data/transl/*) should get a UTF-8 byte-order mark, and then
immediately a CRLF linebreak, for maximum compatibility. I haven't done so yet.



Notes about D
-------------

*   To search the web, use "dlang" in your query. e.g., "dlang writefln".
    Alternatively, use "d programming language".

*   const int* foo() { ... } is the same as int* foo() const { ... }, both
    are valid D and do what the latter would have done in C++: make the method
    callable on a const class object. If you want to return a const pointer:
    const (int*) foo() { ... }; a pointer to const int: const(int)* foo().

*   To do formatted output to stdout, use writefln() in std.stdio, which works
    like printf(). The equivalent to C's sprintf() is format() in std.string,
    which returns a D string.

*   D is garbage-collected by default. You can still do RAII by allocating
    resources in the constructor this(), and deallocate in ~this(). To invoke
    the deallocation at the correct time, call destroy(myobject), which calls
    the destructor and prevents automatic calls to the destructor later.
    This was clear(myobject) in older versions of D, but that's deprecated.
