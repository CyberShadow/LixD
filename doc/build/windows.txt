How to build Lix on a Windows machine
=====================================

This is hard. If you get stuck at any point, don't hesitate to contact me
(Simon N.) and ask me for help:

    IRC:    irc.quakenet.org #lix
    E-Mail: eiderdaus@gmail.com
    Forum:  asdfasdf.ethz.ch/~simon/bb/forum.php -- or -- lemmingsforums.net



Install D and dub
-----------------

Download dmd, the Digital Mars D compiler. It's possible to use compilers
other than dmd, for example gdc, but dmd is the one I've been using.
Get dmd here:

    http://dlang.org/download

During the installation, select the option to add the programs to PATH. You
want to call them from the command line later. You don't have to add anything
to the start menu. You don't need D1 support either.

If you would like, you may test the D environment. See appendix 1 at the
bottom of this file for how to write and compile a hello world program.

Download dub, the D package manager, from here:

    http://code.dlang.org/download

Install it. The default installation options are fine.



Fork the Lix repo and test dub
------------------------------

If you don't have git, download the source as a zip archive here, and unzip:

    https://github.com/SimonN/LixD/archive/master.zip

If you have git, you can instead clone the repository:

    git clone https://github.com/SimonN/LixD.git

Open a command line shell, navigate into the Lix root directory (where the
file dub.json sits) and run:

    dub

The package manager will download and set up D bindings for libraries I use.
At some point, it will error out. When does it error out for you?

    a)  It reaches the compilation and linking stages of Lix itself, and then
        errors out when it tries to link Lix. This is expected, because we have
        not yet installed Allegro 5's binary files. Continue working through
        these instructions.

    b)  It errors out during downloading or setting up the Allegro 5 bindings.
        Try what I describe in appendix 2 at the bottom of this file then.

        If you still get errors _before_ dub tries to link Lix (see point a)
        above), ask me for help. See top of this file for how to contact me.



Install Allegro 5
-----------------

I have chosen Matthew Leverton's binary distribution of Allegro 5. Go here:

    https://www.allegro.cc/files/

Download at random one of the binary files. I took the archive for MinGW 4.7.0.
Unpack it. There are three directories inside: bin/, include/, lib/.
We do _not_ need the include/, that's for C/C++ development. dub will fetch
automatically our D bindings against the libraries. We don't need lib/ either,
we will generate our own linktime libraries from the DLLs in bin/.

Locate your D installation directory, and look for the windows/ subdir.
It might be here:

    C:/"Program Files"/D/dmd2/windows/

This also has subdirectories bin/ and lib/. If you like, make backups of these
directories, so you can retry if something goes wrong.

Allegro 5's bin/ directory has each DLL in 4 possible versions. You can throw
away all versions with "-debug" in their name, and then again all versions
with "-md". This will leave you with one fourth of the DLLs. Put these into
your D installations's ./dmd/windows/bin/.



Install enet
------------

I don't remember anything for this. Look at the enet section of
`./doc/build/linux.txt' and guess what you must do in Windows.



Generate .lib files
-------------------

The D linker doesn't like libXXX.a files, and instead wants XXX.lib files.
We have to make these ourselves. Get implib.exe, look at the Allegro D binding
page on github about where to get it:

    https://github.com/SiegeLord/DAllegro5#windows-notes

For each Allegro DLL that does not have "-debug" or "-md" in its name, do:

    implib /s yourfile.lib yourfile.dll

Put the resulting .lib files in the D installation's lib dir. You might do
some renaming if they aren't found later on, add or remove "-5.0.x" before
the filename extension maybe.

I wrote this section in a rush. If it's not clear, ask me again.

There's a German joke. What does "DLL" stand for? "Die lass liegen."
("Let this one lie around.")



Compile Lix
-----------

Enter the Lix directory, and run:

    dub

It should build the game, finding and linking against the Allegro 5 libraries
in the progress.

If the game finds all libraries, but crashes upon program startup, see
appendix 2.

If the game starts and runs without errors, compile a release build
for maximum performance:

    dub build -b release-nobounds

This takes longer to build. In case of a crash, you won't get a good
crash report either. Non-fatal errors go to ./data/log.txt.



Appendix 1
----------

To test whether the D compiler is set up, copy this into a file hello.d:

    import std.stdio;

    void main()
    {
        writeln("Hello World!");
    }

Open a command line shell, and run:

    dmd hello.d

It should generate an executable file, hello.exe, and an intermediate object
file, which you can safely delete.



Appendix 2
----------

This might prevent a crash upon program start. Try this if the game segfaults
before the black screen with white text lines about the loading progress.

Open dub.json with a text editor, find this line:

    "allegro": "~>2.0",

and change it into:

    "allegro": "~master",

Save the file, and run dub again. You might get a deprecation warning for
using the master branch directly, but we don't care. If that doesn't help,
you can try to set it to:

    "allegro": ">=3.0.1+5.1.8",
